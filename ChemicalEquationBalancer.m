function [] = FINALCHEMBALANCER()
    
clear;
clc;

f = figure('Visible', 'off', 'color', 'white',...
    'Position', [600 600 800 600]);
set(f,'Name','Chemical Equation Balancer');
movegui(f, 'center');

text3 = uicontrol('Style', 'text',...
    'BackgroundColor','white',...
    'Position',[100, 500, 400, 55],...
    'String',...
'PLEASE TYPE ALL COMPOUNDS IN THE MOST CONDENSED FORM.');

text6 = uicontrol('Style', 'text',...
    'BackgroundColor','white',...
    'Position',[100, 480, 400, 55],...
    'String',...
    'For example: C2H4O2 instead of CH3COOH');

text1 = uicontrol('Style', 'text',...
    'BackgroundColor','white',...
    'Position',[100, 420, 400, 55],...
    'String', 'Enter the number of reactants: ');

reactantsNumInput = uicontrol('Style', 'edit',...
    'Position',[100, 400, 400, 40]);

text2 = uicontrol('Style', 'text',...
    'BackgroundColor','white',...
    'Position',[100, 220, 400, 55],...
    'String', 'Enter the number of products: ');

productsNumInput = uicontrol('Style', 'edit',...
    'Position',[100, 200, 400, 40]);

text4 = uicontrol('Style', 'text',...
    'BackgroundColor','white',...
    'Position',[100, 320, 400, 55],...
    'String', 'Enter the reactants separated with spaces: ');

reactants1 = uicontrol('Style', 'edit',...
    'Position',[100, 300, 400, 40]);

text5 = uicontrol('Style', 'text',...
    'BackgroundColor','white',...
    'Position',[100, 120, 400, 55],...
    'String', 'Enter the products separated with spaces: ');

products1 = uicontrol('Style', 'edit',...
    'Position',[100, 100, 400, 40]);

hbutton = uicontrol('Style', 'pushbutton',...
    'String', 'Enter',...
    'Position', [550 95 150 50],...
    'Callback', @callbackfn);



set(f,'Visible','on');

%end

function callbackfn(hObject, eventdata)

set([text1 text2 text3 text4 text5 reactantsNumInput productsNumInput ...
    reactants1 products1 hbutton text6], 'Visible', 'off');

numberOfReactants = get(reactantsNumInput, 'String');
preReactants = get(reactants1, 'String');
pat = '\W+';
reactants = regexp(preReactants, pat, 'split');

numberOfReactants = str2double(numberOfReactants);

numberOfProducts = get(productsNumInput, 'String');
preProducts = get(products1, 'String');
pat = '\W+';
products = regexp(preProducts, pat, 'split');

numberOfProducts = str2double(numberOfProducts);

total = numberOfReactants + numberOfProducts;

size = numel(reactants);
z=1;
x=1;
while x <= size
    temp = reactants{x};
    length = numel(temp);
    y = 1;
    while y < length
       if ((temp(y) == 'A')||(temp(y)=='B')||(temp(y)=='C')||...
               (temp(y)=='D')||(temp(y)=='E')||(temp(y)=='F')||...
               (temp(y)=='G')||(temp(y)=='H')||(temp(y)=='I')||...
               (temp(y)=='J')||(temp(y)=='K')||(temp(y)=='L')||...
               (temp(y)=='M')||(temp(y)=='N')||(temp(y)=='O')||...
               (temp(y)=='P')||(temp(y)=='Q')||(temp(y)=='R')||...
               (temp(y)=='S')||(temp(y)=='T')||(temp(y)=='U')||...
               (temp(y)=='V')||(temp(y)=='W')||(temp(y)=='X')||...
               (temp(y)=='Y')||(temp(y)=='Z')||(temp(y)=='a')||...
               (temp(y)=='b')||(temp(y)=='c')||(temp(y)=='d')||...
               (temp(y)=='e')||(temp(y)=='f')||(temp(y)=='g')||...
               (temp(y)=='h')||(temp(y)=='i')||(temp(y)=='j')||...
               (temp(y)=='k')||(temp(y)=='l')||(temp(y)=='m')||...
               (temp(y)=='n')||(temp(y)=='o')||(temp(y)=='p')||...
               (temp(y)=='q')||(temp(y)=='r')||(temp(y)=='s')||...
               (temp(y)=='t')||(temp(y)=='u')||(temp(y)=='v')||...
               (temp(y)=='w')||(temp(y)=='x')||(temp(y)=='y')||...
               (temp(y)=='z'))&&((temp(y+1) == 'A')||(temp(y+1)=='B')||...
               (temp(y+1)=='C')||(temp(y+1)=='D')||(temp(y+1)=='E')||...
               (temp(y+1)=='F')||(temp(y+1)=='G')||(temp(y+1)=='H')||...
               (temp(y+1)=='I')||(temp(y+1)=='J')||(temp(y+1)=='K')||...
               (temp(y+1)=='L')||(temp(y+1)=='M')||(temp(y+1)=='N')||...
               (temp(y+1)=='O')||(temp(y+1)=='P')||(temp(y+1)=='Q')||...
               (temp(y+1)=='R')||(temp(y+1)=='S')||(temp(y+1)=='T')||...
               (temp(y+1)=='U')||(temp(y+1)=='V')||(temp(y+1)=='W')||...
               (temp(y+1)=='X')||(temp(y+1)=='Y')||(temp(y+1)=='Z'))
       temp = strcat(temp(1:y),'1', temp(y+1:end));
       end
       y=y+1;
    end
    if (temp(end) == 'A')||(temp(end)=='B')||(temp(end)=='C')||...
            (temp(end)=='D')||(temp(end)=='E')||(temp(end)=='F')||...
            (temp(end)=='G')||(temp(end)=='H')||(temp(end)=='I')||...
            (temp(end)=='J')||(temp(end)=='K')||(temp(end)=='L')||...
            (temp(end)=='M')||(temp(end)=='N')||(temp(end)=='O')||...
            (temp(end)=='P')||(temp(end)=='Q')||(temp(end)=='R')||...
            (temp(end)=='S')||(temp(end)=='T')||(temp(end)=='U')||...
            (temp(end)=='V')||(temp(end)=='W')||(temp(end)=='X')||...
            (temp(end)=='Y')||(temp(end)=='Z')||(temp(end) == 'a')||...
            (temp(end)=='b')||(temp(end)=='c')||(temp(end)=='d')||...
            (temp(end)=='e')||(temp(end)=='f')||(temp(end)=='g')||...
            (temp(end)=='h')||(temp(end)=='i')||(temp(end)=='j')||...
            (temp(end)=='k')||(temp(end)=='l')||(temp(end)=='m')||...
            (temp(end)=='n')||(temp(end)=='o')||(temp(end)=='p')||...
            (temp(end)=='q')||(temp(end)=='r')||(temp(end)=='s')||...
            (temp(end)=='t')||(temp(end)=='u')||(temp(end)=='v')||...
            (temp(end)=='w')||(temp(end)=='x')||(temp(end)=='y')||...
            (temp(end)=='z')
       temp = strcat(temp, '1');
    end
    [elements, subscripts] = breakDownCompound(temp);
    
    r=1;
    while r <= numel(subscripts)
        totalSubscripts(r,z) = subscripts(r);
        r=r+1;
    end
    
    y = 1;
    while y <= numel(elements)
        totalElements{y,x} = elements{y};
        y=y+1;
    end
    
    x=x+1;
    z=z+1;
end

x=1;
while z <= total;
    temp = products{x};
    length = numel(temp);
    y = 1;
    while y < length
       if ((temp(y) == 'A')||(temp(y)=='B')||(temp(y)=='C')||...
               (temp(y)=='D')||(temp(y)=='E')||(temp(y)=='F')||...
               (temp(y)=='G')||(temp(y)=='H')||(temp(y)=='I')||...
               (temp(y)=='J')||(temp(y)=='K')||(temp(y)=='L')||...
               (temp(y)=='M')||(temp(y)=='N')||(temp(y)=='O')||...
               (temp(y)=='P')||(temp(y)=='Q')||(temp(y)=='R')||...
               (temp(y)=='S')||(temp(y)=='T')||(temp(y)=='U')||...
               (temp(y)=='V')||(temp(y)=='W')||(temp(y)=='X')||...
               (temp(y)=='Y')||(temp(y)=='Z')||(temp(y) == 'a')||...
               (temp(y)=='b')||(temp(y)=='c')||(temp(y)=='d')||...
               (temp(y)=='e')||(temp(y)=='f')||(temp(y)=='g')||...
               (temp(y)=='h')||(temp(y)=='i')||(temp(y)=='j')||...
               (temp(y)=='k')||(temp(y)=='l')||(temp(y)=='m')||...
               (temp(y)=='n')||(temp(y)=='o')||(temp(y)=='p')||...
               (temp(y)=='q')||(temp(y)=='r')||(temp(y)=='s')||...
               (temp(y)=='t')||(temp(y)=='u')||(temp(y)=='v')||...
               (temp(y)=='w')||(temp(y)=='x')||(temp(y)=='y')||...
               (temp(y)=='z'))&&((temp(y+1) == 'A')||(temp(y+1)=='B')||...
               (temp(y+1)=='C')||(temp(y+1)=='D')||(temp(y+1)=='E')||...
               (temp(y+1)=='F')||(temp(y+1)=='G')||(temp(y+1)=='H')||...
               (temp(y+1)=='I')||(temp(y+1)=='J')||(temp(y+1)=='K')||...
               (temp(y+1)=='L')||(temp(y+1)=='M')||(temp(y+1)=='N')||...
               (temp(y+1)=='O')||(temp(y+1)=='P')||(temp(y+1)=='Q')||...
               (temp(y+1)=='R')||(temp(y+1)=='S')||(temp(y+1)=='T')||...
               (temp(y+1)=='U')||(temp(y+1)=='V')||(temp(y+1)=='W')||...
               (temp(y+1)=='X')||(temp(y+1)=='Y')||(temp(y+1)=='Z'))
       temp = strcat(temp(1:y), '1', temp(y+1:end));
       end
       y=y+1;
    end
    if (temp(end) == 'A')||(temp(end)=='B')||(temp(end)=='C')||...
            (temp(end)=='D')||(temp(end)=='E')||(temp(end)=='F')||...
            (temp(end)=='G')||(temp(end)=='H')||(temp(end)=='I')||...
            (temp(end)=='J')||(temp(end)=='K')||(temp(end)=='L')||...
            (temp(end)=='M')||(temp(end)=='N')||(temp(end)=='O')||...
            (temp(end)=='P')||(temp(end)=='Q')||(temp(end)=='R')||...
            (temp(end)=='S')||(temp(end)=='T')||(temp(end)=='U')||...
            (temp(end)=='V')||(temp(end)=='W')||(temp(end)=='X')||...
            (temp(end)=='Y')||(temp(end)=='Z')||(temp(end) == 'a')||...
            (temp(end)=='b')||(temp(end)=='c')||(temp(end)=='d')||...
            (temp(end)=='e')||(temp(end)=='f')||(temp(end)=='g')||...
            (temp(end)=='h')||(temp(end)=='i')||(temp(end)=='j')||...
            (temp(end)=='k')||(temp(end)=='l')||(temp(end)=='m')||...
            (temp(end)=='n')||(temp(end)=='o')||(temp(end)=='p')||...
            (temp(end)=='q')||(temp(end)=='r')||(temp(end)=='s')||...
            (temp(end)=='t')||(temp(end)=='u')||(temp(end)=='v')||...
            (temp(end)=='w')||(temp(end)=='x')||(temp(end)=='y')||...
            (temp(end)=='z')
       temp = strcat(temp,'1');
    end
    [elements, subscripts] = breakDownCompound(temp);
    
    r=1;
    while r <= numel(subscripts)
        totalSubscripts(r,z) = -1.*subscripts(r);
        r=r+1;
    end
    
    y = 1;
    while y <= numel(elements)
        totalElements{y,z} = elements{y};
        y=y+1;
    end
    
    x=x+1;
    z=z+1;
end

rows = numel(totalElements)/total;

orderedMat = [];
orderedCell = {};

x=1;
count = 1;
while x <= total
    y=1;
    while y <= rows
        z=1;
        definer = 0;
        while z <= numel(orderedCell)
            if (isequal(orderedCell{z}, totalElements{y,x}) == 1)
                definer = 1;
            end 
            z=z+1;
        end
        if definer == 0;
            orderedCell{count,1} = totalElements{y,x};
            if x == 1
                orderedMat(count,1) = totalSubscripts(y,x);
            else
                orderedMat(count,1) = 0;
            end
            count=count+1;
        end
        y=y+1;
    end
    x=x+1;
end

%should have first row of both by here

x=1;
while x <= numel(orderedCell)
   if isequal(orderedCell{x},[])
       orderedMat(x) = [];
       orderedCell(x) = [];
       x=x-1;
   end
   x=x+1;
end
% ^ that deletes empty slots, *the extra empty row*

rowsFinal = numel(orderedCell);

x=2;
while x <= total
    y=1;
    while y <= rowsFinal
        z=1;
        while z <= rows
           if isequal( orderedCell{y,1}, totalElements{z,x}) == 1 
             orderedCell{y,x} = totalElements{z,x};
             orderedMat(y,x) = totalSubscripts(z,x); 
           end
           z=z+1;
        end
        y=y+1;
    end
    x=x+1;
end

% after this finding coefficients

coefficients = null(orderedMat,'r');

toFindFactor = rem(coefficients,1);

x=1;
while x <= numel(toFindFactor)
    if toFindFactor(x)==0
        toFindFactor(x)=[];
        x=x-1;
    end
    x=x+1;
end

while numel(toFindFactor)>0 
    coefficients = coefficients.*(1/toFindFactor(1));
    
    toFindFactor = rem(coefficients,1);

    x=1;
    while x <= numel(toFindFactor)
        if toFindFactor(x)==0
           toFindFactor(x)=[];
           x=x-1;
        end
        x=x+1;
    end
end

coefficients = abs(coefficients);

finalString = 'Your balanced equation is: \n\n';

x = 1;
y = 1;
z = 1000;
while x <= total
   finalString = [finalString, num2str(coefficients(x))]; 
   if y <= numberOfReactants
       finalString = [finalString, reactants{y}];
       finalString = [finalString, ' ']; 
       y = y+1;
   end
   if y == (numberOfReactants + 1)
       finalString = [finalString, '--> ']; 
       y=y+1;
       z=0;
   end
   if (z <= numberOfProducts)&&(z ~= 0)
       finalString = [finalString, products{z}];
       finalString = [finalString, ' ']; 
   end
   x = x+1;
   z = z+1;
end

finalString = sprintf(finalString);

hstr = uicontrol('Style', 'text',...
    'BackgroundColor','white',...
    'Position',[150, 250, 500, 100],...
     'String', finalString);
   set(hstr, 'Visible', 'on')

end

end


